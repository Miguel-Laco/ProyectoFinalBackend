# carts.yaml
paths:
  /api/carts:
    get:
      summary: Obtiene todos los carritos
      tags:
        - Carts
      responses:
        "200":
          description: Los carritos fueron obtenidos correctamente de la base de datos
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#components/schemas/cart"
        "500":
          description: Error interno del servidor
    post:
      summary: Crea un nuevo carrito en la DB
      tags:
        - Carts
      responses:
        "200":
          description: Carrito creado con éxito
          content:
            application/json:
              schema:
                $ref: "#components/schemas/cart"
        "500":
          description: Error interno del servidor

  /api/carts/{cid}/products/{pid}:
    post:
      summary: Agrega un producto al carrito. (PROTEGIDA x TOKEN)
      tags:
        - Carts
      parameters:
        - in: path
          name: cid
          required: true
          schema:
            type: string
          description: ID del carrito al que se agregará el producto.
        - in: path
          name: pid
          required: true
          schema:
            type: string
          description: ID del producto que se agregará al carrito.
      security:
        - BearerAuth: [] 
      responses:
        "200":
          description: Producto agregado al carrito exitosamente.
        "401":
          description: No estas autorizado. (No authHeaders)
        "403":
          description: No tienes permiso para agregar productos a este carrito.
        "404":
          description: El carrito o el producto no fueron encontrados.
        "500":
          description: Error interno del servidor.
    put:
      summary: Actualiza la cantidad de un producto en el carrito.
      tags:
        - Carts
      parameters:
        - in: path
          name: cid
          required: true
          schema:
            type: string
          description: ID del carrito al que pertenece el producto.
        - in: path
          name: pid
          required: true
          schema:
            type: string
          description: ID del producto que se actualizará en el carrito.
      requestBody:
        description: Nueva cantidad del producto en el carrito.
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                quantity:
                  type: integer
                  description: Nueva cantidad del producto en el carrito.
            example:
              quantity: 3
      responses:
        "200":
          description: Cantidad del producto en el carrito actualizada exitosamente.
        "400":
          description: Solicitud incorrecta.
        "404":
          description: El carrito o el producto no fueron encontrados.
        "500":
          description: Error interno del servidor.
    delete:
      summary: Elimina un producto del carrito.
      tags:
        - Carts
      parameters:
        - in: path
          name: cid
          required: true
          schema:
            type: string
          description: ID del carrito del cual se eliminará el producto.
        - in: path
          name: pid
          required: true
          schema:
            type: string
          description: ID del producto que se eliminará del carrito.
      responses:
        "200":
          description: Producto eliminado del carrito exitosamente.
        "404":
          description: El carrito o el producto no fueron encontrados.
        "500":
          description: Error interno del servidor.

  /api/carts/{cid}/purchase:
    post:
      summary: Realiza una compra para un carrito específico
      tags:
        - Carts
      parameters:
        - in: path
          name: cid
          required: true
          schema:
            type: string
          description: ID del carrito para el cual se realiza la compra
      requestBody:
        description: Mail del usuario
        required: true
        content:
          application/json:
            schema:
              $ref: "#components/requestBodies/user"
        "200":
          description: Compra realizada con éxito
        "400":
          description: Solicitud incorrecta
        "500":
          description: Error interno del servidor

  /api/carts/{cid}:
    get:
      summary: Obtiene un carrito por su ID. (PROTEGIDA x TOKEN)
      tags:
        - Carts
      parameters:
        - in: path
          name: cid
          required: true
          schema:
            type: string
          description: ID del carrito que se desea obtener.
      security:
        - BearerAuth: [] 
      responses:
        "200":
          description: Carrito obtenido exitosamente.
          content:
            application/json:
              schema:
                $ref: "#components/schemas/cart"
        "401":
          description: No estás autorizado. (Sin authHeaders)
        "403":
          description: No tienes permiso para acceder a este carrito.
        "404":
          description: El carrito no fue encontrado.
        "500":
          description: Error interno del servidor.
    delete:
      summary: Elimina todos los productos del carrito
      tags:
        - Carts
      parameters:
        - in: path
          name: cid
          required: true
          schema:
            type: string
          description: ID del carrito del cual se eliminarán todos los productos.
      responses:
        "200":
          description: Todos los productos fueron eliminados del carrito exitosamente.
        "404":
          description: El carrito no fue encontrado.
        "500":
          description: Error interno del servidor.
    put:
      summary: Actualiza el carrito con un arreglo de productos
      tags:
        - Carts
      parameters:
        - in: path
          name: cid
          required: true
          schema:
            type: string
          description: ID del carrito que se actualizará
      requestBody:
        description: Arreglo de objetos de productos para actualizar el carrito
        required: true
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: "#/components/schemas/cartItem" # Referencia al esquema de cartItem que definiste
      responses:
        "200":
          description: Carrito actualizado exitosamente
        "400":
          description: Solicitud incorrecta
        "404":
          description: El carrito o el producto no fueron encontrados
        "500":
          description: Error interno del servidor


components:
  schemas:
    cart:
      type: object
      properties:
        _id:
          type: string
          description: ID autogenerado por Mongo, que referencia products
        cart:
          type: object
          properties:
            product:
              type: string
              description: ID del producto en el carrito
            quantity:
              type: integer
              description: Cantidad del producto existente en el carrito
      example:
        _id: "64dedef90012284fcf303ff3"
        cart:
          - product: "64906850fa886ebbabd697cc"
            quantity: 1
    cartItem:
      type: object
      properties:
        _id:
          type: string
          description: ID del producto
        quantity:
          type: integer
          description: Cantidad del producto en el carrito
      example:
        - _id: "64906850fa886ebbabd697cd"
          quantity: 5

  requestBodies:
    user:
      description: Datos del usuario para la compra
      required: true
      content:
        application/json:
          schema:
            type: object
            properties:
              user:
                type: object
                properties:
                  email:
                    type: string
                    description: Correo electrónico del comprador
      example:
        user:
          email: correo_ejemplo@gmail.com
# Defino la seguridad Bearer según la documentación oficial
  securitySchemes:
    BearerAuth:  # Nombre arbitrario para el esquema de seguridad
      type: http
      scheme: bearer
      bearerFormat: JWT
